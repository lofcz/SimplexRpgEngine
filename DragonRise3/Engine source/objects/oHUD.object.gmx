<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-205</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up

global.temp     = -1;
draw            = 1;
alpha[0]        = 0;
alpha[1]        = 0;
alpha[2]        = 0;
alpha[3]        = 0;
die             = 0;
die_alpha       = 0;
effect_scale    = 1;
draw_bestiary   = 0;
temp_inv        = 0;
temp_inv2       = 0;
draw_stats      = 0;
stats_alpha     = 0;
draw_quest      = 0;
effect_scale2   = 1;
skillPointsA    = 0.5;
skillPointsM    = 0;
Sname           = part_system_create();
ticks           = 0;
maxTicks        = 30;
draw_crafting   = 0;
scale_crafting  = 1;
draw_equipment  = 0;
scale_equipment = 1;
draw_status     = 0;
scale_status    = 1;
spellsxPlus     = 16;
expxPlus        = 8;
craftingHelper  = -1;
craftingTitle   = "Výroba";
craftingMenuAlpha = 1;
craftingMenuIndex[0] = "Předměty";
craftingMenuIndex[1] = "Zdokonalení";
craftingMenuIndex[2] = "Materiály";
craftingMenuIndex[3] = "Zušlechtění";
craftingMenuIndex[4] = "Alchymie";
craftingTitleHelper = "";
activeComponent = false;
tempComponent   = false;

drawCraftingMenu = 1;
craftingSelectedIndex = -1;
selectedIndexY = -1;
craftingPageSelected = 0;
craftingKnownItems = ds_list_create();
craftingKnownMaterials = ds_list_create();
craftingKnownAlchemy = ds_list_create();
craftingItemsNewFlag[0, 48] = false;
craftingMaterialsNewFlag[0, 48] = false;
craftingAlchemyNewFlag[0, 48] = false;
craftingEntriesPerPage = 48;
craftingEntriesPerRow  = 8;
craftingItemsSprite[0, 48] = 0;
craftingMaterialsSprite[0, 48] = 0;
craftingAlchemySprite[0, 48] = 0;
craftingItemsName[0, 48] = "";
craftingMaterialsName[0, 48] = "";
craftingAlchemyName[0, 48] = "";
craftingAlchemyName[0, 48] = "";
craftingSelectedItem = -1;
craftingDetails = false;
craftingDetailsHeight = 0;
craftingDetailsAlpha = 0;
craftingSlot[10, 5] = 0;
craftingDetailsText[0, 48] = "";
craftingAlchemyDetailsText[0, 48] = "";
craftingMaterialsDetailsText[0, 48] = "";
craftingTitleHelper2 = "";

craftingSlotFree[10] = true;
craftingSlotSprite[10] = -1;
craftingSlotID[10] = 0;
craftingSlotItemID[10] = -1;
craftingSlotNumber[10] = -1;
craftingSlotOptional[10] = false;

upgradingItemID = -1;
upgradingItemSprite = 0;
upgradingItemSlotID = -1;

enchantItemID[0] = -1;
enchantItemID[1] = -1;
enchantItemID[2] = -1;
enchantItemID[3] = -1;
enchantItemSprite[3] = 0;
enchantItemSlotID[3] = -1;

enrichtItemID = -1;
enrichtItemSprite = 0;
enrichtItemSlotID = -1;
enrichtingOutputSprite = 0;

// TEST - CRAFTING
// *****************************************

// Crafting Item
craftingItemsSprite[0, 3] = 3; // Wooden sword
scrCraftingSetItemKnown(3, "Dřevěný meč", "Poškození: " + scrColorflag(c_lime) + "5" + scrEndColorflag() + " - " + scrColorflag(c_lime) + "8#" + scrEndColorflag() + "Stamina na úder: " + scrColorflag(c_red) + "4 " + scrEndColorflag() + "- " + scrColorflag(c_red) + "5#");

// Crafting Material
craftingMaterialsSprite[0, 3] = 25; // Steel
scrCraftingSetMaterialKnown(3, "Ocel", "Základní materiál.");

// Crafting alchemy
craftingAlchemySprite[0, 3] = 28; // HP Pot
scrCraftingSetAlchemyKnown(3, "Lektvar zdraví", "Jednoduchý dryák s léčivými účinky.");


iconActive[hudIcons.bestiary]  = true;
iconActive[hudIcons.inventory] = true;
iconActive[hudIcons.quest]     = true;
iconActive[hudIcons.crafting]  = false;
iconActive[hudIcons.equipment] = false;
iconActive[hudIcons.status]    = true;

iconAlpha[hudIcons.bestiary]  = 1;
iconAlpha[hudIcons.inventory] = 1;
iconAlpha[hudIcons.quest]     = 1;
iconAlpha[hudIcons.crafting]  = 0.6;
iconAlpha[hudIcons.equipment] = 0.6;
iconAlpha[hudIcons.status]    = 1;

normalxoffset = (view_wview - view_wview); 
halfxoffset   = (normalxoffset / 2)
spellsxPlus  += halfxoffset;
yoffset       = (view_hview - view_hview);

baseFormulaX = (x + 540);
spellMinY    = (y + 560 + yoffset - 10);
spellMaxY    = (y + 560 + yoffset + 30);

can_draw = false;

spellsPage = 0;
drawItemsSlots  = false;

itemSlot[0, 0] = 0;
itemSlot[1, 0] = 0;
itemSlot[2, 0] = 0;
itemSlot[3, 0] = 0;
itemSlotsAlpha = 0;

hudAlpha = 1;

scrAchievementRegister(0, "Objevil jsi Simplex!", "Vítej, vývojáři.", 0, medalEnum.diamond);

scrAchievementUnlock(0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy PSystem

part_system_destroy(Sname);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump to player position

if (instance_number(oPlayer) &gt; 0) {x = oPlayer.x; y = oPlayer.y;}
draw = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw HUD

x = view_xview;
y = view_yview;

if (room == mapHouseAlice) {draw = false;}

if (!draw) {hudAlpha = lerp(hudAlpha, 0, 0.1);}
else {hudAlpha = lerp(hudAlpha, 1, 0.1);}

if (instance_number(oPlayer) &gt; 0 &amp;&amp; hudAlpha &gt; 0.02)
{ 
// Call update scripts
scrAffectsUpdate();      
apiPlayerUpdateProperties();

// Reset draw mode + set text align to center
clr(c_black, hudAlpha);
alg("center", fntPixelSmall);    

// Draw HUD bars (hp, shield, mana, stamina) + experience bar
scrHudDrawBar(600, 0, 2, 10, 1, oPlayer.last_hp, oPlayer.vlastnost[vlastnost_max_zivot], 0);
scrHudDrawBar(600, 30, 4, 11, 2, oPlayer.last_stit, oPlayer.vlastnost[vlastnost_max_stit], 1);
scrHudDrawBar(600, 60, 0, 9, 0, oPlayer.last_mana, oPlayer.vlastnost[vlastnost_max_mana], 2);
scrHudDrawBar(600, 90, 6, 12, 3, oPlayer.last_stamina, oPlayer.vlastnost[vlastnost_max_stamina], 3);
scrHudDrawXpBar(275, 571);

// Draw binded spells
alg("default", fntPixelHuge);

       draw_sprite(sSpellsUI,0,x+540+spellsxPlus,y+560+yoffset);
       if (oPlayer.spell[0] = "")
       {
       draw_set_alpha(min(0.4, hudAlpha));
       draw_text(x+551+spellsxPlus,y+562+yoffset,"J");
       draw_set_alpha(min(1, hudAlpha));
       }
       else 
            {
            draw_sprite(oPlayer.spell_sprite[0],0,x+540+spellsxPlus,y+560+yoffset);              
            draw_set_alpha(min(0.4, hudAlpha));
            if (oPlayer.spell_cd[0] &gt; 0) {draw_rectangle_cd(x+540+3+spellsxPlus,y+560+3+yoffset,x+572+spellsxPlus,y+592+yoffset,360-((oPlayer.spell_cd[0] / oPlayer.temp_cd[0])*360))}
            draw_set_alpha(min(1, hudAlpha));           
            draw_sprite(sSpellsUI,1,x+540+spellsxPlus,y+560+yoffset); 
            draw_set_font(fntPixelSmall);  
            draw_text_colour(x+559+spellsxPlus,y+572+yoffset,"J",c_black,c_black,c_black,c_black,min(1, hudAlpha)); 
            draw_text_colour(x+560+spellsxPlus,y+572+yoffset,"J",c_white,c_white,c_white,c_white,min(1, hudAlpha));  
            draw_set_font(fntPixelHuge);
            }
       draw_sprite(sSpellsUI,0,x+584+spellsxPlus,y+560+yoffset);
       if (oPlayer.spell[1] = "")
       {
        draw_set_alpha(min(0.4, hudAlpha));
        draw_text(x+595+spellsxPlus,y+562+yoffset,"K");
        draw_set_alpha(min(1, hudAlpha));
       }
       else 
            {
            draw_sprite(oPlayer.spell_sprite[1],0,x+584+spellsxPlus,y+560+yoffset); 
            draw_set_alpha(min(0.4, hudAlpha));
            if (oPlayer.spell_cd[1] &gt; 0) {draw_rectangle_cd(x+584+3+spellsxPlus,y+560+3+yoffset,x+616+spellsxPlus,y+592+yoffset,360-((oPlayer.spell_cd[1] / oPlayer.temp_cd[1])*360))}
            draw_set_alpha(min(1, hudAlpha));           
            draw_sprite(sSpellsUI,1,x+584+spellsxPlus,y+560+yoffset);
            draw_set_font(fntPixelSmall);  
            draw_text_colour(x+602+spellsxPlus,y+572+yoffset,"K",c_black,c_black,c_black,c_black,min(1, hudAlpha)); 
            draw_text_colour(x+603+spellsxPlus,y+572+yoffset,"K",c_white,c_white,c_white,c_white,min(1, hudAlpha));  
            draw_set_font(fntPixelHuge);

            }
       draw_sprite(sSpellsUI,0,x+628+spellsxPlus,y+560+yoffset);
       if (oPlayer.spell[2] = "")
       {
        draw_set_alpha(min(0.4, hudAlpha));
        draw_text(x+640+spellsxPlus,y+561+yoffset,"L");
        draw_set_alpha(min(1, hudAlpha));
       }
       else 
            {
            draw_sprite(oPlayer.spell_sprite[2],0,x+628+spellsxPlus,y+560+yoffset);  
            draw_set_alpha(min(0.4, hudAlpha));
            if (oPlayer.spell_cd[2] &gt; 0) {draw_rectangle_cd(x+628+3+spellsxPlus,y+560+3+yoffset,x+660+spellsxPlus,y+592+yoffset,360-((oPlayer.spell_cd[2] / oPlayer.temp_cd[2])*360))}
            draw_set_alpha(min(1, hudAlpha));     
            draw_sprite(sSpellsUI,1,x+628+spellsxPlus,y+560+yoffset);
            draw_set_font(fntPixelSmall);  
            draw_text_colour(x+645+spellsxPlus,y+572+yoffset,"L",c_black,c_black,c_black,c_black,min(1, hudAlpha)); 
            draw_text_colour(x+646+spellsxPlus,y+572+yoffset,"L",c_white,c_white,c_white,c_white,min(1, hudAlpha));  
            draw_set_font(fntPixelHuge);
            }
       
     // Draw item slots
     clr(c_black, min(0.5, hudAlpha));
     draw_roundrect_ext(x+685, y+500, x+699, y+549, 2, 2, false);
     draw_roundrect_ext(x+685, y+550, x+699, y+599, 2, 2, false);
     clr(c_black, hudAlpha);   
     draw_roundrect_ext(x+685, y+500, x+699, y+549, 2, 2, true);
     draw_roundrect_ext(x+685, y+550, x+699, y+599, 2, 2, true);   
     
     clr(c_white, hudAlpha);
     fnt();
     if (!drawItemsSlots) {draw_text(x+690, y+513, "&lt;");} else {draw_text(x+690, y+513, "&gt;");}
     draw_text(x+690, y+563, "&gt;");
     clr(c_black, hudAlpha);

     // Handle on-click event
     if (mouse_check_button_pressed(mb_left))
        {
         if (mouse_in(x + 685, x + 699, y + 500, y + 549))
            {
             drawItemsSlots = !drawItemsSlots;
            }
        }
     // Adjust alpha
     if (drawItemsSlots) {itemSlotsAlpha = lerp(itemSlotsAlpha, 1, 0.1);}
     else {itemSlotsAlpha = lerp(itemSlotsAlpha, 0, 0.1);}   
     
     
     // Draw item slots   
     if (itemSlotsAlpha &gt; 0.05)
        {
         clr(c_black, min(itemSlotsAlpha, hudAlpha));
         for (var z = 0; z &lt; 3; z++)
            {
             number = 0;
             if (itemSlot[z, 0] != 0) {number = inventoryNumber(itemSlot[z, 0]);}
             if (number == 0) {itemSlot[z, 0] = 0;}
             
             draw_sprite(sSpellsUI, 2, x + 540 + spellsxPlus + (z * 44), y + 520 + yoffset);
             if (number &gt; 0) {alg("center", fntPixelSmall); draw_text(x + 540 + spellsxPlus + (z * 44) + 28, y + 520 + yoffset + 6, string(number)); alg();}
             fnt(fntPixelTiny);
             draw_text(x + 540 + spellsxPlus + (z * 44) + 25, y + 520 + yoffset + 20, string(z + 1)); 
             fnt();
             
              // Handle item drop - assign item
              if (oInventory.slot_vlastnosti[oInventory.h_c, vlastnost_canBeFastEquiped] &amp;&amp; oInventory.drag)
                    {
                      draw_sprite(sSpellsUI, 3, x + 540 + spellsxPlus + (z * 44), y + 520 + yoffset);                    
                    }
                    
              if (mouse_in(x + 540 + spellsxPlus + (z * 44), x + 540 + spellsxPlus + (z * 44) + 36, y + 520 + yoffset, y + 520 + yoffset + 36))
                {                
                 if (oInventory.drag &amp;&amp; mouse_check_button_released(mb_left) &amp;&amp; oInventory.slot_vlastnosti[oInventory.h_c, vlastnost_canBeFastEquiped])
                    {
                      itemSlot[z, 0] = oInventory.equip_sprite_s[6];
                    }
                 else if (mouse_check_button_pressed(mb_left))
                    {
                     itemSlot[z, 0] = 0;
                    }
                }
                
              // Draw details of assigned slots
              if (itemSlot[z, 0] != 0)
                 {
                  draw_sprite(sTestItem, (itemSlot[z, 0] - 1), x + 540 + spellsxPlus + (z * 44) + 16, y + 520 + yoffset + 16);                  
                 }
            }
        }

     // Handle usage of quick items
     if ((keyboard_check_pressed(vk_anykey) &amp;&amp; keyboard_lastchar == '+') || keyboard_check_pressed(vk_numpad1))
        {
         if (itemSlot[0, 0] != 0) {inventoryAction(itemSlot[0, 0], 0);}
        }   

     if ((keyboard_check_pressed(vk_anykey) &amp;&amp; keyboard_lastchar == 'ě') || keyboard_check_pressed(vk_numpad2))
        {
         if (itemSlot[1, 0] != 0) {inventoryAction(itemSlot[1, 0], 0);}
        }
        
     if ((keyboard_check_pressed(vk_anykey) &amp;&amp; keyboard_lastchar == 'š') || keyboard_check_pressed(vk_numpad3))
        {
         if (itemSlot[2, 0] != 0) {inventoryAction(itemSlot[2, 0], 0);}
        }
                        
     // Black outline alpha UP
     if (effect_scale2   &lt; 1.2 &amp;&amp; draw_quest)     {effect_scale2   += 0.02;}          
     if (effect_scale    &lt; 1.2 &amp;&amp; draw_bestiary)  {effect_scale    += 0.02;}
     if (scale_crafting  &lt; 1.2 &amp;&amp; draw_crafting)  {scale_crafting  += 0.02;}
     if (scale_equipment &lt; 1.2 &amp;&amp; draw_equipment) {scale_equipment += 0.02;}
     if (scale_status    &lt; 1.2 &amp;&amp; draw_status)    {scale_status    += 0.02;}
 
     // Draw outline
     tempAlpha = min(0.7, iconAlpha[hudIcons.bestiary], hudAlpha);
     if (iconAlpha[hudIcons.bestiary] &lt; 1) {tempAlpha = 0;}
     draw_sprite_ext(sBestiary,0,view_xview+8+16,view_yview+560+16+yoffset,effect_scale,effect_scale,0,c_black,tempAlpha);
     tempAlpha = min(0.7, iconAlpha[hudIcons.crafting], hudAlpha);
     if (iconAlpha[hudIcons.crafting]  &lt; 1) {tempAlpha = 0;}
     draw_sprite_ext(sCrafting,0,view_xview+16+128,view_yview+560+16+yoffset,scale_crafting,scale_crafting,0,c_black,tempAlpha);
     tempAlpha = min(0.7, iconAlpha[hudIcons.equipment], hudAlpha);
     if (iconAlpha[hudIcons.equipment]  &lt; 1) {tempAlpha = 0;}
     draw_sprite_ext(sEquipment,0,view_xview+24+128+32,view_yview+560+16+yoffset,scale_equipment,scale_equipment,0,c_black,tempAlpha);
     tempAlpha = min(0.7, iconAlpha[hudIcons.status], hudAlpha);
     if (iconAlpha[hudIcons.status]  &lt; 1) {tempAlpha = 0;}
     draw_sprite_ext(sStatus,0,view_xview+32+128+64,view_yview+560+16+yoffset,scale_status,scale_status,0,c_black,tempAlpha);
     tempAlpha = min(0.7, iconAlpha[hudIcons.quest], hudAlpha);
     if (iconAlpha[hudIcons.quest]  &lt; 1) {tempAlpha = 0;}
     draw_sprite_ext(sQuestIcon,0,view_xview+96+8,view_yview+560+16+yoffset,effect_scale2,effect_scale2,0,c_black,tempAlpha);

     
     // Draw full icons
     draw_sprite_ext(sBestiary,  0, (view_xview + 24 ), (view_yview + 576 + yoffset), iconAlpha[hudIcons.bestiary],  iconAlpha[hudIcons.bestiary],  0, c_white, min(iconAlpha[hudIcons.bestiary], hudAlpha));
     draw_sprite_ext(sCrafting,  0, (view_xview + 144), (view_yview + 576 + yoffset), iconAlpha[hudIcons.crafting],  iconAlpha[hudIcons.crafting],  0, c_white, min(iconAlpha[hudIcons.crafting], hudAlpha));
     draw_sprite_ext(sEquipment, 0, (view_xview + 184), (view_yview + 576 + yoffset), iconAlpha[hudIcons.equipment], iconAlpha[hudIcons.equipment], 0, c_white, min(iconAlpha[hudIcons.equipment], hudAlpha));
     draw_sprite_ext(sStatus,    0, (view_xview + 224), (view_yview + 576 + yoffset), iconAlpha[hudIcons.status],    iconAlpha[hudIcons.status],    0, c_white, min(iconAlpha[hudIcons.status], hudAlpha));
     draw_sprite_ext(sQuestIcon, 0, (view_xview + 104), (view_yview + 576 + yoffset), iconAlpha[hudIcons.quest],     iconAlpha[hudIcons.quest],     0, c_white, min(iconAlpha[hudIcons.quest], hudAlpha));

     // Adjust full icons alpha
     for (i = 0; i &lt; array_length_1d(iconAlpha); i++)
        {
        if (iconAlpha[i] &lt; 1   &amp;&amp; iconActive[i])  {iconAlpha[i] = lerp(iconAlpha[i], 1.02, 0.05);}   // Increase
        if (iconAlpha[i] &gt; 0.6 &amp;&amp; !iconActive[i]) {iconAlpha[i] = lerp(iconAlpha[i], 0.61, 0.05);} // Decrease
        }
 
     // Black outline alpha DOWN
     if (effect_scale    &gt; 1 &amp;&amp; !draw_bestiary)  {effect_scale    -= 0.02;}
     if (scale_crafting  &gt; 1 &amp;&amp; !draw_crafting)  {scale_crafting  -= 0.02;}
     if (scale_equipment &gt; 1 &amp;&amp; !draw_equipment) {scale_equipment -= 0.02;}
     if (scale_status    &gt; 1 &amp;&amp; !draw_status)    {scale_status    -= 0.02;}
     if (effect_scale2   &gt; 1 &amp;&amp; !draw_quest)     {effect_scale2   -= 0.02;}
     
     // Navigation
     //********************************************************************
     
     // Quest
        if (keyboard_check_pressed(ord("Q")) &amp;&amp; iconActive[hudIcons.quest] &amp;&amp; !scrGettActiveComponent())
        {
        draw_quest = ! draw_quest;
        if (instance_number(oQuest) &gt; 0) {oQuest.active = !oQuest.active;}
        
        if (draw_quest) {iconActive[hudIcons.status] = false; iconActive[hudIcons.inventory] = false;}
        else {iconActive[hudIcons.status] = true; iconActive[hudIcons.inventory] = true;}
        }
     // Crafting
        if (keyboard_check_pressed(ord("R")) &amp;&amp; iconActive[hudIcons.crafting] &amp;&amp; !scrGettActiveComponent())
        {
        draw_crafting = !draw_crafting;
        
        if (draw_crafting) {iconActive[hudIcons.equipment] = false;}
        else {iconActive[hudIcons.equipment] = true;}
        }        
     // Equipment
        /*if (keyboard_check_pressed(ord("I")) &amp;&amp; iconActive[hudIcons.equipment] &amp;&amp; !scrGettActiveComponent() &amp;&amp; !scrGetTempComponent())
        {
        draw_equipment = !draw_equipment;
        
        if (draw_equipment) {iconActive[hudIcons.crafting] = false;}
        else {iconActive[hudIcons.crafting] = true;}

        oInventory.draw_equipment = draw_equipment;
        }  */
     // Status
        if (keyboard_check_pressed(ord("T")) &amp;&amp; iconActive[hudIcons.status] &amp;&amp; !scrGettActiveComponent())
        {
        draw_status = !draw_status;
        if (instance_number(oStatusMenu) &gt; 0) {oStatusMenu.activated = !oStatusMenu.activated;}
        }  
    // Bestiář   
     if (keyboard_check_pressed(ord("B")) &amp;&amp; iconActive[hudIcons.bestiary] &amp;&amp; !scrGettActiveComponent())
        {
        draw_bestiary = ! draw_bestiary;
        if (instance_number(oBestiar) &gt; 0) {oBestiar.activated = !oBestiar.activated;}
        }                  
        
// Draw crafting
if (draw_crafting) {scrCraftingDraw();}

// Reset temp component
tempComponent = false;
}
   
if (oPlayer.last_hp &lt;= 0) {die = 1; oPlayer.can_move2 = 0;}  
   
if (die)
    {
     die_alpha += 0.05;
     draw_set_color(c_black);
     draw_set_alpha(die_alpha);
     draw_rectangle(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview,0);        
     if (die_alpha &gt;= 1) {game_restart();}
    }

// Spell switching
/// Spell switching

/*
Athor: @VaclavVal
Revision: @LoFCZ
Version: 1.1
*/

normalxoffset = (view_wview - view_wview); 
halfxoffset   = (normalxoffset / 2)
spellsxPlus  += halfxoffset;
yoffset       = (view_hview - view_hview);

baseFormulaX = (x + 540 + spellsxPlus);
spellMinY    = (y + 560 + yoffset - 10);
spellMaxY    = (y + 560 + yoffset + 30);

for (i = 0; i &lt; 3; i++)
    {
     spellMinX[i] = (baseFormulaX + (44 * i) - 8);
     spellMaxX[i] = (baseFormulaX + (44 * i) + 30);     
    }

// Pick up spell
for (i = 0; i &lt; 3; i++)
    {
     if (mouse_check_button_pressed(mb_left))
        {
         if (mouse_in(spellMinX[i], spellMaxX[i], spellMinY, spellMaxY))
            {
             spell_transformed_index = i;
             can_draw = true;
             break;
            }
        }
    }
    
// Put spell to the new slot
if (mouse_check_button_released(mb_left))
   {
    can_draw = false;
    
    for (i = 0; i &lt; 3; i++)
        {
         if (mouse_in(spellMinX[i], spellMaxX[i], spellMinY, spellMaxY))
            {
             // Store temp vars
             spell_transformed_index2 = i;             
             spell_value              = oPlayer.spell[spell_transformed_index];
             spell_value2             = oPlayer.spell_sprite[spell_transformed_index];
             spell_cd_switch          = oPlayer.spell_cd[spell_transformed_index];
             spell_cd_switch2         = oPlayer.temp_cd[spell_transformed_index];
                   
             // Switch actual values
             oPlayer.spell[spell_transformed_index]         = oPlayer.spell[spell_transformed_index2];
             oPlayer.spell[spell_transformed_index2]        = spell_value;
             oPlayer.spell_cd[spell_transformed_index]      = oPlayer.spell_cd[spell_transformed_index2];
             oPlayer.spell_cd[spell_transformed_index2]     = spell_cd_switch;
             oPlayer.temp_cd[spell_transformed_index]       = oPlayer.temp_cd[spell_transformed_index2];
             oPlayer.temp_cd[spell_transformed_index2]      = spell_cd_switch2;
             oPlayer.spell_sprite[spell_transformed_index]  = oPlayer.spell_sprite[spell_transformed_index2];
             oPlayer.spell_sprite[spell_transformed_index2] = spell_value2;             
             break;
            }          
        }
    }    
       
// Draw temp spell
if (can_draw)
    {
     draw_sprite(oPlayer.spell_sprite[spell_transformed_index], 0, (mouse_x - 16), (mouse_y - 16));
    }
   
/// Draw overlay
if (room == mapHouseAlice)
{
draw_set_blend_mode(bm_add);
draw_sprite(sRoomMask0, 0, 144, 16);
draw_set_blend_mode(bm_normal);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
